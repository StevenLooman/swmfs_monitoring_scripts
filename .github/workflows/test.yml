name: Run PowerShell Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
        
    - name: Install Pester
      shell: pwsh
      run: |
        Write-Host "üîß Installing Pester module..."
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        
        # Remove any existing Pester modules to avoid conflicts
        $existingPester = Get-Module Pester -ListAvailable
        if ($existingPester) {
          Write-Host "Found existing Pester versions:"
          $existingPester | Format-Table Name, Version, Path
        }
        
        # Install Pester 5.5.0
        Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -RequiredVersion 5.5.0 -Verbose
        
        # Verify installation
        Write-Host "‚úÖ Pester installation completed. Available versions:"
        Get-Module Pester -ListAvailable | Format-Table Name, Version, Path
        
        # Import the specific version
        Import-Module Pester -RequiredVersion 5.5.0 -Force
        Write-Host "‚úÖ Pester 5.5.0 imported successfully"
        
    - name: Run Tests
      shell: pwsh
      run: |
        Write-Host "üîç Running PowerShell Tests with Pester..."
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "Pester Module Information:"
        Get-Module Pester -ListAvailable | Format-Table Name, Version, Path
        
        $config = New-PesterConfiguration
        $config.Run.Path = 'SwmfsMonitor.Tests.ps1'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'JUnitXml'
        $config.TestResult.OutputPath = 'TestResults.xml'
        $config.Output.Verbosity = 'Detailed'
        
        Write-Host "üìù Pester Configuration:"
        $config | Format-List
        
        $result = Invoke-Pester -Configuration $config
        
        Write-Host "üìä Test Results Summary:"
        Write-Host "Total Tests: $($result.TotalCount)"
        Write-Host "Passed: $($result.PassedCount)"
        Write-Host "Failed: $($result.FailedCount)"
        Write-Host "Skipped: $($result.SkippedCount)"
        
        if ($result.FailedCount -gt 0) {
          Write-Host "‚ùå Some tests failed!"
          exit 1
        } else {
          Write-Host "‚úÖ All tests passed!"
        }
        
    - name: Check if test results exist
      shell: pwsh
      run: |
        if (Test-Path "TestResults.xml") {
          Write-Host "‚úÖ Test results file found"
          Write-Host "File size: $((Get-Item TestResults.xml).Length) bytes"
          Write-Host "First 20 lines of TestResults.xml:"
          Get-Content "TestResults.xml" | Select-Object -First 20
        } else {
          Write-Host "‚ùå Test results file not found"
          Write-Host "Current directory contents:"
          Get-ChildItem
          exit 1
        }
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v2
      if: always() && hashFiles('TestResults.xml') != ''
      with:
        name: PowerShell Tests
        path: TestResults.xml
        reporter: java-junit
        fail-on-error: true
        max-annotations: 50
        list-suites: all
        list-tests: failed
